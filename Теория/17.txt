17. Охарактеризуйте коллекции общего назначения: стек, очередь, динамический массив, хеш-таблица.
Коллекции общего назначения: стек, очередь, динамический массив, хеш-таблица
Коллекции
В С# под коллекцией понимается некоторая группа объектов. Коллекции упрощают реализацию многих задач программирования, предлагая уже готовые решения для построения структур данных. Все коллекции разработаны на основе четко определенных интерфейсов, поэтому стандартизируют способ обработки группы объектов. Среда .NET Framework поддерживает три основных типа коллекций: общего назначения, специализированные и ориентированные на побитовую организацию данных.
Коллекции общего назначения определены в пространстве имен System.Collection и реализуют такие структуры данных, как стеки, очереди, динамические массивы, словари (хеш-таблицы, предназначенные для хранения пар ключ/значение), отсортированный список для хранения пар ключ/значение. Коллекции общего назначения работают с данными типа object, поэтому их можно использовать для хранения данных любого типа.
Коллекции специального назначения определены в пространстве имен System.Collection.Specialized и ориентированы на обработку данных конкретного типа или на обработку данных уникальным способом. Например, существуют специализированные коллекции, предназначенные только для обработки строк.
В пространстве имен System.Collection определена единственная коллекция, ориентированная на побитовую организацию данных, которая служит для хранения групп битов и поддерживает такой набор операций, который не характерен для коллекций других типов.
Коллекции общего назначения
Классы коллекций общего назначения:
Класс	Описание
Stack	Стек - частный случай однонаправленного списка, действующий по принципу: последним пришел - первым вышел
Queue	Очередь - частный случай однонаправленного списка, действующего по принципу: первым пришел - первым вышел
ArrayList	Динамический массив, т.е. массив который при необходимости может увеличивать свой размер
Hashtable	Хеш-таблица для пар ключ/значение
SortedList	Отсортированный список пар ключ/значение
Рассмотрим данные коллекции более подробно.
Замечание. Абстрактный тип данных (АТД) список - это последовательность элементов a1, а2,...,аn (n >= 0) одного типа. Количество элементов n называется длиной списка. Если n > 0, то а1 называется первым элементом списка, а аn - последним элементом списка. В случае n = 0 имеем пустой список, который не содержит элементов. Важное свойство списка заключается в том, что его элементы линейно упорядочены в соответствии с их позицией в списке. Так элемент аi предшествует аi+1 для i=1, 2, …n-1 и аi следует за аi-1 для i=2, ...n. Список называется однонаправленным, если каждый элемент списка содержит ссылку на следующий элемент. Если каждый элемент списка содержит две ссылки (одну на следующий элемент в списке, вторую - на предыдущий элемент), то такой список называется двунаправленным (двусвязным). А если последний элемент связать указателем с первым, то получится кольцевой список.
Класс Stack
АТД стек - это частный случай однонаправленного списка, добавление элементов в который и выборка элементов из которого выполняются с одного конца, называемого вершиной стека (головой - head ). При выборке элемент исключается из стека. Другие операции со стеком не определены. Говорят, что стек реализует принцип обслуживания LIFO (last in - fist out, последним пришел - первым вышел). Стек проще всего представить себе в виде пирамиды, на которую надевают кольца.
 
Достать первое кольцо можно только после того, как будут сняты все верхние кольца.
В С# реализацию АТД стек представляет класс Stack, который реализует интерфейсы ICollection, IEnumerable и ICloneable. Stack - это динамическая коллекция, размер которой изменяется.
В классе Stack определены следующие конструкторы:
public Stack(); //создает пустой стек, начальная вместимость которого равна 10
public Stack(int n); // создает пустой стек, начальная вместимость которого равна n
public Stack(ICollection c); //создает стек, который содержит элементы коллекции, заданной 
//параметром с, и аналогичной вместимостью
Кроме методов, определенных в интерфейсах, реализуемых классом Stack, в этом классе определены собственные методы:
Метод	Описание
public virtual bool Contains(object v)	Возвращает значение true, если объект v содержится в вызывающем стеке, в противном случае возвращает значение false.
public virtual void Clear()	Устанавливает свойство Сount равным нулю, тем самым очищая стек.
public virtual object Peek()	Возвращает элемент, расположенный в вершине стека, но не извлекая его из стека
public virtual object Pop()	Возвращает элемент, расположенный в вершине стека, и извлекает его из стека
public virtual void Push(object v)	Помещает объект v в стек
public virtual object[] ToArray()	Возвращает массив, который содержит копии элементов вызывающего стека
Класс Queue
АТД очередь - это частный случай однонаправленного списка, добавление элементов в который выполняется в один конец (хвост), а выборка производится с другого конца (головы). Другие операции с очередью не определены. При выборке элемент исключается из очереди. Говорят, что очередь реализует принцип обслуживания FIFO (fist in - fist out, первым пришел - первым вышел). Очередь проще всего представить в виде узкой трубы, в один конец которой бросают мячи, а с другого конца которой они вылетают. Понятно, что мяч, который был брошен в трубу первым, первым и вылетит с другого конца.
 
В С# реализацию АТД очередь представляет класс Queue, который также как и стек реализует интерфейсы ICollection, IEnumerable и ICloneable. Queue - это динамическая коллекция, размер которой изменяется. При необходимости увеличение вместимости очереди происходит с коэффициентом роста по умолчанию равным 2.0.
В классе Queue определены следующие конструкторы:
public Queue(); //создает пустую очередь, начальная вместимость которой равна 32
public Queue (int capacity); // создает пустую очередь, начальная вместимость которой равна capacity
//создает пустую очередь, начальная вместимость которой равна capacity, и коэффициент роста
//устанавливается параметром n
public Queue (int capacity, float n); 
//создает очередь, которая содержит элементы коллекции, заданной параметром с, и аналогичной
//вместимостью
public Queue (ICollection c);
Кроме методов, определенных в интерфейсах, реализуемых классом Queue, в этом классе определены собственные методы:
Метод	Описание
public virtual bool Contains (object v)	Возвращает значение true, если объект v содержится в вызывающей очереди, в противном случае возвращает значение false
public virtual void Clear ()	Устанавливает свойство Count равным нулю, тем самым очищая очередь
public virtual object Dequeue ()	Возвращает объект из начала вызывающей очереди, удаляя его из очереди
public virtual object Peek ()	Возвращает объект из начала вызывающей очереди, не удаляя его из очереди
public virtual void Enqueue(object v)	Добавляет объект v в конец очереди
public virtual object [ ] ToArrау ()	Возвращает массив, который содержит копии элементов из вызывающей очереди
public virtual void TrimToSize()	Устанавливает свойство Capacity равным значению свойства Count
Класс ArrayList
В С# стандартные массивы имеют фиксированную длину, которая не может измениться во время выполнения программы. Класс ArrayList предназначен для поддержки динамических массивов, которые при необходимости могут увеличиваться или сокращаться.
Объект класса ArrayList представляет собой массив переменной длины, элементами которого являются объектные ссылки. Любой объект класса ArrayList создается с некоторым начальным размером. При превышении этого размера коллекция автоматически удваивается. В случае удаления объектов массив можно сократить.
Класс ArrayList реализует интерфейсы ICollection, IList, IEnumerable и ICloneable. В классе ArrayList определены следующие конструкторы:
//создает пустой массив с максимальной емкостью равной 16 элементам, при текущей //размерности 0 
public ArrayList()  
public ArrayList(int capacity) //создает массив с заданной емкостью capacity, при текущей //размерности 0
public ArrayList(ICollection с) //строит массив, который инициализируется элементами //коллекции с
Помимо методов, определенных в интерфейсах, которые реализует класс ArrayList, в нем определены и собственные методы:
Метод	Описание
public virtual void AddRange (ICollection с)	Добавляет элементы из коллекции с в конец вызывающей коллекции
public virtual int BinarySearch (object v)	В вызывающей отсортированной коллекции выполняет поиск значения, заданного параметром v. Возвращает индекс найденного элемента. Если искомое значение не обнаружено, возвращает отрицательное значение.
public virtual int BinarySearch (object v, IComparer comp)	В вызывающей отсортированной коллекции выполняет поиск значения, заданного параметром v, на основе метода сравнения объектов, заданного параметром соmp. Возвращает индекс найденного элемента. Если искомое значение не обнаружено, возвращает отрицательное значение.
public virtual int BinarySearch (int startldx, int count, object v, IComparer comp)	В вызывающей отсортированной коллекции выполняет поиск значения, заданного параметром v, на основе метода сравнения объектов, заданного параметром comp. Поиск начинается с элемента, индекс которого равен значению startIdx, и включает count элементов. Метод возвращает индекс найденного элемента. Если искомое значение не обнаружено, возвращает отрицательное значение.
public virtual void CopyTo(Array ar, int startIdx)	Копирует содержимое вызывающей коллекции, начиная с элемента, индекс которого равен значению startIdx, в массив, заданный параметром аr. Приемный массив должен быть одномерным и совместимым по типу с элементами коллекции.
public virtual void CopyTo(int srcldx, Array ar, int destIdx, int count)	Копирует count элементов вызывающей коллекции, начиная с элемента, индекс которого равен значению srcIdx, в массив, заданный параметром аr, начиная с элемента, индекс которого равен значению destIdx. Приемный массив должен быть одномерным и совместимым по типу с элементами коллекции
public virtual ArrayList GetRange(int idx, int count)	Возвращает часть вызывающей коллекции типа ArrayList. Диапазон возвращаемой коллекции начинается с индекса idx и включает count элементов. Возвращаемый объект ссылается на те же элементы, что и вызывающий объект
public static ArrayList FixedSize(ArrayList ar)	Превращает коллекцию ar в ArrayList -массив с фиксированным размером и возвращает результат
public virtual void InsertRange(int startldx, ICollection c)	Вставляет элементы коллекции, заданной параметром с, в вызывающую коллекцию, начиная с индекса, заданного параметром startIdx
public virtual int LastlndexOf(object v)	Возвращает индекс последнего вхождения объекта v в вызывающей коллекции. Если искомый объект не обнаружен, возвращает отрицательное значение
public static ArrayList Readonly(ArrayList ar)	Превращает коллекцию ar в ArrayList -массив, предназначенный только для чтения
public virtual void RemoveRange(int idx, int count)	Удаляет count элементов из вызывающей коллекции, начиная с элемента, индекс которого равен значению idx
public virtual void Reverse()	Располагает элементы вызывающей коллекции в обратном порядке
public virtual void Reverse(int startldx, int count)	Располагает в обратном порядке count элементов вызывающей коллекции, начиная с индекса startldx
public virtual void SetRange(int startldx, ICollection c)	Заменяет элементы вызывающей коллекции, начиная с индекса startldx, элементами коллекции, заданной параметром с
public virtual void Sort()	Сортирует коллекцию по возрастанию
public virtual void Sort(IComparer comp)	Сортирует вызывающую коллекцию на основе метода сравнения объектов, заданного параметром comp. Если параметр comp имеет нулевое значение, для каждого объекта используется стандартный метод сравнения
public virtual void Sort ( int startidx, int endidx, icomparer comp)	Сортирует часть вызывающей коллекции на основе метода сравнения объектов, заданного параметром comp. Сортировка начинается с индекса startidx и заканчивается индексом endidx. Если параметр comp имеет нулевое значение, для каждого объекта используется стандартный метод сравнения
public virtual object [ ] ToArray ()	Возвращает массив, который содержит копии элементов вызывающего объекта
public virtual Array ToArray (Type type)	Возвращает массив, который содержит копии элементов вызывающего объекта. Тип элементов в этом массиве задается параметром type
public virtual void TrimToSize()	Устанавливает свойство Capacity равным значению свойства Count
Свойство Capacity позволяет узнать или установить емкость вызывающего динамического массива типа ArrayList. Емкость представляет собой количество элементов, которые можно сохранить в ArrayList -массиве без его увеличения. Если вам заранее известно, сколько элементов должно содержаться в ArrayList -массиве, то размерность массива можно установить, используя свойство Capacity, сэкономив тем самым системные ресурсы. Если нужно уменьшить размер ArrayList-массива, то путем установки свойства Capacity можно сделать его меньшим. Но устанавливаемое значение не должно быть меньше значения свойства Count, иначе будет сгенерировано исключение ArgumentOutOfRangeException. Чтобы сделать емкость ArrayList -массива равной действительному количеству элементов, хранимых в нем в данный момент, установите свойство Capacity равным свойству Count. Того же эффекта можно добиться, вызвав метод TrimToSize ().
Класс Hashtable
Класс Hashtable предназначен для создания коллекции, в которой для хранения объектов используется хеш-таблица. В хеш-таблице для хранения информации используется механизм, именуемый хешированием (hashing). Суть хеширования состоит в том, что для определения уникального значения, которое называется хеш-кодом, используется информационное содержимое соответствующего ему ключа. Хеш-код затем используется в качестве индекса, по которому в таблице отыскиваются данные, соответствующие этому ключу. Преобразование ключа в хеш-код выполняется автоматически, т.е. сам хеш-код вы даже не увидите. Но преимущество хеширования - в том, что оно позволяет сокращать время выполнения таких операций, как поиск, считывание и запись данных, даже для больших объемов информации.
Класс Hashtable реализует стандартные интерфейсы IDictionary, ICollection, IEnumerable, ISerializable, IDeserializationCallback и ICloneable. Размер хеш-таблицы может динамически изменяться. Размер таблицы увеличивается тогда, когда количество элементов превышает значение, равное произведению вместимости таблицы и ее коэффициента заполнения, который может принимать значение на интервале от 0,1 до 1,0. По умолчанию установлен коэффициент равный 1,0.
В классе Hashtable определено несколько конструкторов:
public Hashtable()   //создает пустую хеш-таблицу 
// строит хеш-таблицу, которая инициализируется элементами коллекции с
public Hashtable(IDictionary с) 	
public Hashtable(int capacity) //создает хеш-таблицу с вместимостью capacity
//создает хеш-таблицу вместимостью capacity и коэффициентом заполнения n 
public Hashtable(int capacity, float n)
Помимо методов, определенных в интерфейсах, которые реализует класс Hashtable, в нем определены и собственные методы:
Метод	Описание
public virtual bool ContainsKey (object k)	Возвращает значение true , если в вызывающей хеш-таблице содержится ключ, заданный параметром k. В противном случае возвращает значение false
public virtual bool ContainsValue (object v)	Возвращает значение true, если в вызывающей хеш-таблице содержится значение, заданное параметром v. В противном случае возвращает значение false
public virtual IDictionaryEnumerator GetEnumerator()	Возвращает для вызывающей хеш-таблицы нумератор типа IDictionaryEnumerator
В классе Hashtable, помимо свойств, определенных в реализованных им интерфейсах, определены два собственных public -свойства:
public virtual ICollection Keys { get; } //позволяет получить коллекцию ключей
public virtual ICollection Values { get; } //позволяет получить коллекцию значений
Для добавления элемента в хеш-таблицу необходимо вызвать метод Add(), который принимает два отдельных аргумента: ключ и значение. Важно отметить, что хеш-таблица не гарантирует сохранения порядка элементов, т.к хеширование обычно не применяется к отсортированным таблицам.
 
