2. Охарактеризуйте механизм генерации исключительных ситуаций в С#.
Опишем возможности по генерации и обработке исключительных ситуаций в языке C#. Для генерации исключительной ситуации используется оператор throw:
throw [объект-класса-исключительной-ситуации];
Объект, указанный после throw, должен быть объектом класса исключительной ситуации. В C# классами исключительных ситуаций являются классSystem.Exceptionи все его наследники. В некоторых языках для .NET можно (хотя и не рекомендуется) генерировать исключения, не являющиеся производными отException. В таком случае CLR автоматически поместит объект исключения в оболочку классаRuntimeWrappedException, который наследуется отException.
Класс Exception– это базовый класс для представления исключительных ситуаций. Основными элементами этого класса являются:
– свойство только для чтения Message, содержащее строку с описанием ошибки;
– перегруженный конструктор с одним параметром-строкой, записываемым в свойство Message;
– строковое свойство StackTrace, описывающее содержимое стека вызова, в которой первым отображается самый последний вызов метода.
– свойство InnerException– объектException, описывающий ошибку, вызывающую текущее исключение.
В пространстве имён Systemсодержится несколько классов для описания наиболее распространённых исключений. Упомянём некоторые из них:
1. ArgumentException– генерируется, когда методу передаётся недопустимый аргумент.
2. ArgumentNullException(наследникArgumentException) – генерируется, когда методу передаётся аргумент, равныйnull.
3. ArgumentOutOfRangeException(наследникArgumentException) – генерируется, если методу передаётся аргумент, выходящий за допустимый диапазон.
4. IndexOutOfRangeException– выбрасывается при попытке обратиться к элементу массива по индексу, который выходит за границы массива.
5. InvalidCastException– генерируется, когда явное преобразование типов завершается неудачей.
6. InvalidOperationException– сигнализирует о том, что состояние объекта препятствует выполнению метода (пример: запись в файл, который открыт только для чтения).
7. NotSupportedException– сигнализирует о том, что функциональная возможность не поддерживается.
8. NotImplementedException– сигнализирует о том, что функциональная возможность не реализована.
9. ObjectDisposedException– генерируется, когда методу вызывается у удалённого из памяти объекта.
try
{
    Console.Write("Введите имя: ");
    string? name = Console.ReadLine();
    if (name== null || name.Length < 2)
    {
        throw new Exception("Длина имени меньше 2 символов");
    }
    else
    {
        Console.WriteLine($"Ваше имя: {name}");
    }
}
catch (Exception e)
{
    Console.WriteLine($"Ошибка: {e.Message}");
}

