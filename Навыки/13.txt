13. Проклассифицируйте коллекции. Приведите пример.
В C# для хранения набора однотипных данных можно использовать массивы. Но с ними не всегда удобно работать потому, что они имеют фиксированный размер и часто бывает сложно угадать, какого размера нужен массив.
Для решения этих задач в C# есть коллекции. Они позволяют динамически изменять свой размер. Также они удобны тем что некоторые из них представляют из себя готовые реализации стандартных структур данных, таких как список, хеш таблица, стек, очередь.
Все коллекции лежат в нескольких пространствах имен:
•	System.Collections — простые необобщенные коллекции.
•	System.Collections.Generic — обобщенные коллекции.
•	System.Collections.Specialized — специальные коллекции.
•	System.Collections.Concurrent — коллекции для работы в многопоточной среде.
Классы коллекций общего назначения:
Класс	Описание
Stack	Стек - частный случай однонаправленного списка, действующий по принципу: последним пришел - первым вышел
Queue	Очередь - частный случай однонаправленного списка, действующего по принципу: первым пришел - первым вышел
ArrayList	Динамический массив, т.е. массив который при необходимости может увеличивать свой размер
Hashtable	Хеш-таблица для пар ключ/значение
SortedList	Отсортированный список пар ключ/значение

Класс List представляет из себя простейший список однотипных элементов, которые можно получить по индексу. Предоставляет методы для поиска, сортировки и изменения списка.
var linkedList = new List<string>();
linkedList.Add("A");
linkedList.Add("B");
linkedList.Add("C");

Словарь Dictionary. Словари хранят данные в виде ключ-значение. Каждый элемент словаря представляет из себя объект структуры KeyValuePair. В качестве ключа можно использовать любой объект. Ключи должны быть уникальными в рамках коллекции.
var linkedList = new Dictionary<string, string>();
linkedList.Add("key1", "A");
linkedList.Add("key2", "B");
linkedList.Add("key3", "C");
Внутри словари построены на базе хеш-таблицы, что позволяет очень быстро вставлять элементы и получать по ключ
Стек Stack и Очередь Queue. Очереди и стеки полезны, когда нужно временно хранить какие-то элементы, то есть удалять элемент после его извлечения. Также они позволяют определить строгую очередность записи и извлечения элементов.
Стеки Stack — реализуют подход LIFO (last in — first out).
var stack = new Stack<int>();
stack.Push(1); // stack = [1]
stack.Push(2); // stack = [1,2]
var item = stack.Pop(); // stack = [1], item = 2
Очереди Queue — реализуют подход (first in — first out).
var queue = new Queue<int>();
queue.Enqueue(1); // queue = [1]
queue.Enqueue(2); // queue = [1,2]
item = queue.Dequeue(); // queue = [2], item = 1
Внутри они реализованы с помощью обычных массивов.
