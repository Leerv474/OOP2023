18. Охарактеризуйте генерацию собственных исключений. Приведите пример.
В C#, генерация собственных исключений позволяет разработчику создавать специальные исключительные ситуации, которые могут возникать в программе. Это позволяет более гибко управлять ошибками и предоставлять более информативные сообщения об ошибках для облегчения отладки и обработки исключений.
Для создания собственного исключения в C# необходимо определить новый класс, который наследуется от класса Exception или его производных классов. В этом классе можно добавить дополнительные свойства и методы, чтобы предоставить дополнительную информацию об исключении.
Вот пример создания собственного исключения в C#:
using System;
// Создание собственного исключения
public class CustomException : Exception
{
    // Дополнительное свойство для передачи дополнительной информации
    public string AdditionalInformation { get; }

    // Конструктор с параметрами
    public CustomException(string message, string additionalInformation) : base(message)
    {
        AdditionalInformation = additionalInformation;
    }
}

public class Program
{
    public static void Main()
    {
        try
        {
            // Генерация собственного исключения
            throw new CustomException("Произошла ошибка.", "Дополнительная информация");
        }
        catch (CustomException ex)
        {
            // Обработка собственного исключения
            Console.WriteLine("Ошибка: " + ex.Message);
            Console.WriteLine("Дополнительная информация: " + ex.AdditionalInformation);
        }
    }
}
В этом примере мы создали собственное исключение CustomException, которое содержит дополнительное свойство AdditionalInformation для передачи дополнительной информации об исключении. Затем мы используем ключевое слово throw для генерации исключения в блоке try. В блоке catch мы обрабатываем собственное исключение CustomException и выводим сообщение об ошибке и дополнительную информацию.
